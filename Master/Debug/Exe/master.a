;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/22/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;#define RS PORTA.0
;#define RW PORTA.1
;#define E PORTA.2
;#define DATA PORTC
;#define Slave1 PORTB.0
;#define Slave2 PORTB.1
;
;int uartIndex = 0;
;unsigned char uartReceive[6];
;unsigned char uartSend[6];
;unsigned char nhietdo;
;unsigned char tram,chuc,dvi;
;
;void khoidong(char x)
; 0000 0031 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0032     RW=RS=E=0;
;PCODE: $0000000F VOL: 0
;	x -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033     DATA=x;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0034     //delay_ms(5);
; 0000 0035     E=1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0036     //delay_ms(5);
; 0000 0037     E=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0038     delay_ms(20);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0039 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;void hienthi(char x)
; 0000 003B {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003C     RW=E=0;
;PCODE: $00000024 VOL: 0
;	x -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003D     RS=1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003E     DATA=x;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F     //delay_ms(5);
; 0000 0040     E=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0041     //delay_ms(5);
; 0000 0042     E=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0043     delay_ms(20);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0044 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;void hienchuoi(char *data)
; 0000 0046 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0047     int n,i;
; 0000 0048     n = strlen(data);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	*data -> Y+4
;	n -> R16,R17
;	i -> R18,R19
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049     for(i = 0; i < n; i++)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004A     {
; 0000 004B         hienthi(data[i]);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004C     }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004D }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;void uart_char_send(unsigned char chr){
; 0000 004E void uart_char_send(unsigned char chr){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004F     while (!(UCSRA & (1<<UDRE))) {}; //cho den khi bit UDRE=1
;PCODE: $00000057 VOL: 0
;	chr -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0050             UDR=chr;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;void uart_string_send(unsigned char *txt){   //"hello"
; 0000 0053 void uart_string_send(unsigned char *txt){
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0054     unsigned char n, i;
; 0000 0055     n=strlen(txt); //Dem so ky tu
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0056           for (i=0; i<n; i++){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0057             uart_char_send(txt[i]);    //phat du lieu
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0058             }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0059 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;char uart_char_receive(void)
; 0000 005B {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005C     while (!(UCSRA & (1<<UDRE))) {};
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005D     return UDR;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 005E }
;PCODE: $0000008E VOL: 0
;void SPI_Write(char data)		/* SPI write data function */
; 0000 0060 {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0061 	SPDR = data;			/* Write data to SPI data register */
;PCODE: $00000091 VOL: 0
;	data -> Y+0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0062 	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0063 
; 0000 0064 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;char SPI_Read()				/* SPI read data function */
; 0000 0066 {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0067 //	SPDR = 0xFF;
; 0000 0068 	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0069 	return(SPDR);			/* Return received data */
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006A }
;PCODE: $000000A7 VOL: 0
;char SPI_tranceiver(char data)		/* SPI write data function */
; 0000 006C {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006D 	SPDR = data;			/* Write data to SPI data register */
;PCODE: $000000AA VOL: 0
;	data -> Y+0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006E 	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 006F     return(SPDR);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0070 }
;PCODE: $000000B6 VOL: 0
;void UARTSetup(char chuc, char donvi)
; 0000 0072 {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0073     uartSend[0] = 'L';
;PCODE: $000000B9 VOL: 0
;	chuc -> Y+1
;	donvi -> Y+0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0074     uartSend[1] = 'M';
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0075     uartSend[2] = chuc;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0076     uartSend[3] = donvi;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0077     uartSend[4] = '\n';
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0078 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 007B {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 007C 
; 0000 007D     uartReceive[uartIndex] = uart_char_receive();
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 007E     uartIndex++;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 007F     //SxLxx //S1L11
; 0000 0080     if(uartIndex == 5)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0081     {
; 0000 0082         uartIndex = 0;
;PCODE: $000000D9 VOL: 0
; 0000 0083         //khoidong(0x80);
; 0000 0084         uartReceive[5] = '\0';
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0085         //hienchuoi(uartReceive);
; 0000 0086         if(strcmp(uartReceive,"S1L10") == 0)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0087         {
; 0000 0088             PORTB &=0b11111110;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0089             SPI_Write('1');
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 008A             PORTB |=0b00000001;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 008B         }
; 0000 008C         else if(strcmp(uartReceive,"S1L11") == 0)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 008D         {
; 0000 008E             PORTB &=0b11111110;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 008F             SPI_Write('2');
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0090             PORTB |=0b00000001;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0091         }
; 0000 0092         else if(strcmp(uartReceive,"S1L20") == 0)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0093         {
; 0000 0094             PORTB &=0b11111110;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0095             SPI_Write('3');
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0096             PORTB |=0b00000001;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0097         }
; 0000 0098         else if(strcmp(uartReceive,"S1L21") == 0)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0099         {
; 0000 009A             PORTB &=0b11111110;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 009B             SPI_Write('4');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 009C             PORTB |=0b00000001;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 009D         }
; 0000 009E         else if(strcmp(uartReceive,"S1L30") == 0)
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 009F         {
; 0000 00A0             PORTB &=0b11111110;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00A1             SPI_Write('5');
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A2             PORTB |=0b00000001;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00A3         }
; 0000 00A4         else if(strcmp(uartReceive,"S1L31") == 0)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00A5         {
; 0000 00A6             PORTB &=0b11111110;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00A7             SPI_Write('6');
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00A8             PORTB |=0b00000001;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00A9         }
; 0000 00AA         else if(strcmp(uartReceive,"S1L40") == 0)
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00AB         {
; 0000 00AC             PORTB &=0b11111110;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AD             SPI_Write('7');
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00AE             PORTB |=0b00000001;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AF         }
; 0000 00B0         else if(strcmp(uartReceive,"S1L41") == 0)
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00B1         {
; 0000 00B2             PORTB &=0b11111110;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00B3             SPI_Write('8');
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00B4             PORTB |=0b00000001;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00B5         }       /************/
; 0000 00B6         else if(strcmp(uartReceive,"S2L10") == 0)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00B7         {
; 0000 00B8             PORTB &=0b11111101;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00B9             SPI_Write('1');
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00BA             PORTB |=0b00000010;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00BB         }
; 0000 00BC         else if(strcmp(uartReceive,"S2L11") == 0)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00BD         {
; 0000 00BE             PORTB &=0b11111101;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00BF             SPI_Write('2');
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C0             PORTB |=0b00000010;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00C1         }
; 0000 00C2         else if(strcmp(uartReceive,"S2L20") == 0)
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00C3         {
; 0000 00C4             PORTB &=0b11111101;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00C5             SPI_Write('3');
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00C6             PORTB |=0b00000010;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00C7         }
; 0000 00C8         else if(strcmp(uartReceive,"S2L21") == 0)
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00C9         {
; 0000 00CA             PORTB &=0b11111101;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00CB             SPI_Write('4');
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00CC             PORTB |=0b00000010;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00CD         }
; 0000 00CE         else if(strcmp(uartReceive,"S2L30") == 0)
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00CF         {
; 0000 00D0             PORTB &=0b11111101;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00D1             SPI_Write('5');
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00D2             PORTB |=0b00000010;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00D3         }
; 0000 00D4         else if(strcmp(uartReceive,"S2L31") == 0)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00D5         {
; 0000 00D6             PORTB &=0b11111101;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00D7             SPI_Write('6');
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00D8             PORTB |=0b00000010;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00D9         }
; 0000 00DA         else if(strcmp(uartReceive,"S2L40") == 0)
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00DB         {
; 0000 00DC             PORTB &=0b11111101;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00DD             SPI_Write('7');
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00DE             PORTB |=0b00000010;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00DF         }
; 0000 00E0         else if(strcmp(uartReceive,"S2L41") == 0)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00E1         {
; 0000 00E2             PORTB &=0b11111101;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00E3             SPI_Write('8');
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00E4             PORTB |=0b00000010;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00E5         }
; 0000 00E6 
; 0000 00E7 
; 0000 00E8     }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00E9 }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0

	.DSEG
_0x2E:
	.BYTE 0x60
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// SPI functions
;#include <spi.h>
;
;void main(void)
; 0000 00F3 {

	.CSEG
;PCODE: $000001DF VOL: 0
; 0000 00F4 // Declare your local variables here
; 0000 00F5 
; 0000 00F6 // Input/Output Ports initialization
; 0000 00F7 // Port A initialization
; 0000 00F8 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00F9 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00FA // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00FB PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00FC 
; 0000 00FD // Port B initialization
; 0000 00FE // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 00FF DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0100 // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 0101 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0102 
; 0000 0103 // Port C initialization
; 0000 0104 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0105 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0106 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0107 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0108 
; 0000 0109 // Port D initialization
; 0000 010A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 010B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 010C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 010D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 010E 
; 0000 010F // Timer/Counter 0 initialization
; 0000 0110 // Clock source: System Clock
; 0000 0111 // Clock value: Timer 0 Stopped
; 0000 0112 // Mode: Normal top=0xFF
; 0000 0113 // OC0 output: Disconnected
; 0000 0114 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0115 TCNT0=0x00;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0116 OCR0=0x00;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0117 
; 0000 0118 // Timer/Counter 1 initialization
; 0000 0119 // Clock source: System Clock
; 0000 011A // Clock value: Timer1 Stopped
; 0000 011B // Mode: Normal top=0xFFFF
; 0000 011C // OC1A output: Disconnected
; 0000 011D // OC1B output: Disconnected
; 0000 011E // Noise Canceler: Off
; 0000 011F // Input Capture on Falling Edge
; 0000 0120 // Timer1 Overflow Interrupt: Off
; 0000 0121 // Input Capture Interrupt: Off
; 0000 0122 // Compare A Match Interrupt: Off
; 0000 0123 // Compare B Match Interrupt: Off
; 0000 0124 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0125 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0126 TCNT1H=0x00;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0127 TCNT1L=0x00;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0128 ICR1H=0x00;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0129 ICR1L=0x00;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 012A OCR1AH=0x00;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 012B OCR1AL=0x00;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 012C OCR1BH=0x00;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 012D OCR1BL=0x00;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 012E 
; 0000 012F // Timer/Counter 2 initialization
; 0000 0130 // Clock source: System Clock
; 0000 0131 // Clock value: Timer2 Stopped
; 0000 0132 // Mode: Normal top=0xFF
; 0000 0133 // OC2 output: Disconnected
; 0000 0134 ASSR=0<<AS2;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0135 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0136 TCNT2=0x00;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0137 OCR2=0x00;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0138 
; 0000 0139 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 013A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 013B 
; 0000 013C // External Interrupt(s) initialization
; 0000 013D // INT0: Off
; 0000 013E // INT1: Off
; 0000 013F // INT2: Off
; 0000 0140 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0141 MCUCSR=(0<<ISC2);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0142 
; 0000 0143 // USART initialization
; 0000 0144 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0145 // USART Receiver: On
; 0000 0146 // USART Transmitter: On
; 0000 0147 // USART Mode: Asynchronous
; 0000 0148 // USART Baud Rate: 9600
; 0000 0149 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 014A UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 014B UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 014C UBRRH=0x00;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 014D UBRRL=0x33;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 014E 
; 0000 014F // Analog Comparator initialization
; 0000 0150 // Analog Comparator: Off
; 0000 0151 // The Analog Comparator's positive input is
; 0000 0152 // connected to the AIN0 pin
; 0000 0153 // The Analog Comparator's negative input is
; 0000 0154 // connected to the AIN1 pin
; 0000 0155 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0156 SFIOR=(0<<ACME);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0157 
; 0000 0158 // ADC initialization
; 0000 0159 // ADC disabled
; 0000 015A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 015B 
; 0000 015C // SPI initialization
; 0000 015D // SPI Type: Master
; 0000 015E // SPI Clock Rate: 2000.000 kHz
; 0000 015F // SPI Clock Phase: Cycle Start
; 0000 0160 // SPI Clock Polarity: Low
; 0000 0161 // SPI Data Order: MSB First
; 0000 0162 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0163 SPSR=(0<<SPI2X);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0164 
; 0000 0165 // TWI initialization
; 0000 0166 // TWI disabled
; 0000 0167 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0168 
; 0000 0169 // Global enable interrupts
; 0000 016A #asm("sei")
;PCODE: $0000022E VOL: 0
	sei
;PCODE: $0000022F VOL: 0
; 0000 016B     khoidong(0x0C);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 016C     khoidong(0x38);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 016D     hienchuoi("Nhiet do:");
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 016E while (1)
;PCODE: $00000237 VOL: 0
; 0000 016F       {
; 0000 0170       // Place your code here
; 0000 0171         PORTB |= 0x02;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0172         PORTB &= ~0x01;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0173         nhietdo = SPI_tranceiver(0x00);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0174         PORTB |= 0x01;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0175         chuc = nhietdo/10 + 48;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0176         dvi = nhietdo%10 + 48;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0177         khoidong(0x89);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0178 
; 0000 0179         hienthi(chuc);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 017A         hienthi(dvi);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 017B         hienthi(223);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 017C         hienthi('C');
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 017D         UARTSetup(chuc, dvi);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 017E         uart_string_send(uartSend);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 017F         PORTB &= ~0x02;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0180         SPI_Write(nhietdo);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0181         PORTB |= 0x02;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0182         delay_ms(500);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0183       }
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0184 }
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0

	.DSEG
_0x4D:
	.BYTE 0xA
